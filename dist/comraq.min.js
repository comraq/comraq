!function e(r,t,n){function o(u,a){if(!t[u]){if(!r[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var l=new Error("Cannot find module '"+u+"'");throw l.code="MODULE_NOT_FOUND",l}var f=t[u]={exports:{}};r[u][0].call(f.exports,function(e){var t=r[u][1][e];return o(t?t:e)},f,f.exports,e,r,t,n)}return t[u].exports}for(var i="function"==typeof require&&require,u=0;u<n.length;u++)o(n[u]);return o}({1:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._concatMutable=t._concat=t.empty=void 0;var n=e("./../../utils/checks"),o=e("./../curry");t.empty=function(e){if(!(0,n.isFunction)(e.empty))throw new TypeError("Cannot get empty/unit value of "+e+" without the empty method!");return e.empty()},t._concat=(0,o.currify)(function(e,r){if(!(0,n.isFunction)(r.concat))throw new TypeError("Semigroup "+r+" does not have concat method!");return r.concat(e)},2,!1,o.placeholder),t._concatMutable=(0,o.currify)(function(e,r){if(!(0,n.isFunction)(r.concatMutable))throw new TypeError("Semigroup "+r+" does not have concatMutable method!");return r.concatMutable(e)},2,!1,o.placeholder)},{"./../../utils/checks":39,"./../curry":9}],2:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(e){return e}},{}],3:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./Monoid");Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return o.empty}});var i=e("./join");Object.defineProperty(t,"join",{enumerable:!0,get:function(){return n(i)["default"]}});var u=e("./identity");Object.defineProperty(t,"identity",{enumerable:!0,get:function(){return n(u)["default"]}})},{"./Monoid":1,"./identity":2,"./join":4}],4:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../../utils/checks"),o=e("./../curry"),i=(0,o.currify)(function(e,r){if((0,n.isFunction)(e.join))return e.join();if(void 0===r)return i.bind(void 0,e);if(!(0,n.isFunction)(r.join))throw new Error("Monad "+r+" does not have method join!");return r.join(e)},1,!1,o.placeholder);t["default"]=i},{"./../../utils/checks":39,"./../curry":9}],5:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./slice");Object.defineProperty(t,"slice",{enumerable:!0,get:function(){return n(o)["default"]}}),Array.prototype.empty=function(){return[]},Array.prototype.concatMutable=function(e){return this.push(e),this}},{"./slice":6}],6:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../curry");t["default"]=(0,n.currify)(function(e,r,t){return t.slice(e,r)},3,!1,n.placeholder)},{"./../curry":9}],7:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../utils/checks"),o=function i(e){if(!(0,n.isFunction)(e))throw new Error("First argument '"+e+"' of currify is not a function!");return function(){var r=this,t=arguments[0];return(0,n.isFunction)(t)?function(){for(var n=arguments.length,o=Array(n),u=0;n>u;u++)o[u]=arguments[u];return i(e)(t.apply(r,o))}:e.apply(this,arguments)}};t["default"]=o},{"./../utils/checks":39}],8:[function(e,r,t){"use strict";function n(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.pipe=t.compose=void 0;var o=e("./../utils/checks"),i=function(e,r){for(var t=arguments.length,i=Array(t>2?t-2:0),u=2;t>u;u++)i[u-2]=arguments[u];return e.call(i,function(e,t){if(!(0,o.isFunction)(t))throw new Error("Composition functions cannot take non-function as intermediate arguments!");return(0,o.isArray)(e)&&r?t.apply(void 0,n(e)):t(e)})};t.compose=function(){for(var e=arguments.length,r=Array(e),t=0;e>t;t++)r[t]=arguments[t];var n=r[r.length-1];if(!(0,o.isFunction)(n)){if(r.length<=1)throw new Error("Functions must be supplied before function arguments!");return i.apply(void 0,[Array.prototype.reduceRight,!1].concat(r))}return function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];var o=!0;return t.length<=1&&(o=!1,t=t[0]),i.apply(void 0,[Array.prototype.reduceRight,o].concat(r,[t]))}},t.pipe=function(){for(var e=arguments.length,r=Array(e),t=0;e>t;t++)r[t]=arguments[t];var n=r[0];return(0,o.isFunction)(n)?function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];var o=!0;return t.length<=1&&(o=!1,t=t[0]),i.apply(void 0,[Array.prototype.reduce,o,t].concat(r))}:r.length<=1?n:i.apply(void 0,[Array.prototype.reduce,!1].concat(r))}},{"./../utils/checks":39}],9:[function(e,r,t){"use strict";function n(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.autoCurry=t.currify=t.placeholder=void 0;var o=e("../utils/checks"),i=(t.placeholder=Symbol["for"]("comraq/curry/placeholder"),function(e){for(var r=arguments.length,t=Array(r>1?r-1:0),n=1;r>n;n++)t[n-1]=arguments[n];if(!(0,o.isFunction)(e))throw new Error("First argument '"+e+"' of curry is not a function!");return e.bind.apply(e,[void 0].concat(t))});t["default"]=i;var u=(t.currify=function(e){var r=arguments.length<=1||void 0===arguments[1]?-1:arguments[1],t=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],n=arguments.length<=3||void 0===arguments[3]?void 0:arguments[3];if(!(0,o.isFunction)(e))throw new Error('Argument "'+e+'" of currify is not a function!');return 0>=r&&(r=e.length),arguments.length<4?u(e,r,t):a(e,r,t,n,Array(r).fill(n))},function f(e,r,t){for(var o=arguments.length,i=Array(o>3?o-3:0),u=3;o>u;u++)i[u-3]=arguments[u];return r<=i.length?e.apply(void 0,n(t?i.reverse():i)):function(){for(var n=arguments.length,o=Array(n),u=0;n>u;u++)o[u]=arguments[u];return f.apply(void 0,[e,r,t].concat(i,o))}}),a=function s(e,r,t,o,i){var u=i.indexOf(o);return-1===u||u>=r?e.apply(void 0,n(t?i.reverse():i)):function(){for(var n=arguments.length,u=Array(n),a=0;n>a;a++)u[a]=arguments[a];return s(e,r,t,o,c(o,u,i.slice()))}},c=function(e,r,t){var n=-1,o=!0,i=!1,u=void 0;try{for(var a,c=r[Symbol.iterator]();!(o=(a=c.next()).done);o=!0){var l=a.value;n=t.indexOf(e,++n),n=-1===n?t.length:n,l!==e&&(t[n]=l)}}catch(f){i=!0,u=f}finally{try{!o&&c["return"]&&c["return"]()}finally{if(i)throw u}}return t},l=(t.autoCurry=function(e){var r=arguments.length<=1||void 0===arguments[1]?0:arguments[1];if(!(0,o.isFunction)(e))throw new Error("Argument '"+e+"' of currify is not a function!");return 0>=r&&(r=e.length),l(e,r)},function d(e,r){for(var t=arguments.length,i=Array(t>2?t-2:0),u=2;t>u;u++)i[u-2]=arguments[u];var a=i.splice(0,r);if(r>a.length)return function(){for(var t=arguments.length,o=Array(t),i=0;t>i;i++)o[i]=arguments[i];return d.apply(void 0,[e.bind.apply(e,[void 0].concat(n(a))),r-a.length].concat(o))};var c=e.apply(void 0,n(a));return(0,o.isFunction)(c)?d.call.apply(d,[void 0,c,c.length].concat(i)):c})},{"../utils/checks":39}],10:[function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r["default"]=e,r}function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.pipe=t.compose=t.autoCurry=t.placeholder=t.currify=t.curry=t.hasProp=t.withProp=t.getProp=t.trace=t.composable=t.transducers=t.algebraic=t.iterables=t.arrays=t.strings=void 0;var i=e("./composable");Object.defineProperty(t,"composable",{enumerable:!0,get:function(){return o(i)["default"]}});var u=e("./utils");Object.defineProperty(t,"trace",{enumerable:!0,get:function(){return u.trace}});var a=e("./prop");Object.defineProperty(t,"getProp",{enumerable:!0,get:function(){return a.getProp}}),Object.defineProperty(t,"withProp",{enumerable:!0,get:function(){return a.withProp}}),Object.defineProperty(t,"hasProp",{enumerable:!0,get:function(){return a.hasProp}});var c=e("./curry");Object.defineProperty(t,"curry",{enumerable:!0,get:function(){return o(c)["default"]}}),Object.defineProperty(t,"currify",{enumerable:!0,get:function(){return c.currify}}),Object.defineProperty(t,"placeholder",{enumerable:!0,get:function(){return c.placeholder}}),Object.defineProperty(t,"autoCurry",{enumerable:!0,get:function(){return c.autoCurry}});var l=e("./composition");Object.defineProperty(t,"compose",{enumerable:!0,get:function(){return l.compose}}),Object.defineProperty(t,"pipe",{enumerable:!0,get:function(){return l.pipe}});var f=e("./strings"),s=n(f),d=e("./arrays"),p=n(d),y=e("./iterables"),b=n(y),v=e("./algebraic"),h=n(v),m=e("./transducers"),g=n(m);t.strings=s,t.arrays=p,t.iterables=b,t.algebraic=h,t.transducers=g},{"./algebraic":3,"./arrays":5,"./composable":7,"./composition":8,"./curry":9,"./iterables":13,"./prop":18,"./strings":19,"./transducers":25,"./utils":36}],11:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../../utils/checks");t["default"]=function(e){if(!(0,n.isIterable)(e))throw new TypeError("Cannot get iterator of non-iterable "+e+"!");return e[Symbol.iterator]()}},{"./../../utils/checks":39}],12:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./get-iterator"),u=n(i);t["default"]=function(e){if(!(0,o.isIterable)(e))throw new Error("Cannot get head element of non-iterable "+e+"!");return(0,o.isArray)(e)?(0,o.isUndefined)(e[0])?null:e[0]:(0,u["default"])(e).next().value}},{"./../../utils/checks":39,"./get-iterator":11}],13:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./reduce");Object.defineProperty(t,"reduce",{enumerable:!0,get:function(){return n(o)["default"]}}),Object.defineProperty(t,"reduceRight",{enumerable:!0,get:function(){return o.reduceRight}}),Object.defineProperty(t,"reduce1",{enumerable:!0,get:function(){return o.reduce1}}),Object.defineProperty(t,"reduceRight1",{enumerable:!0,get:function(){return o.reduceRight1}});var i=e("./reverse");Object.defineProperty(t,"reverse",{enumerable:!0,get:function(){return n(i)["default"]}});var u=e("./get-iterator");Object.defineProperty(t,"getIterator",{enumerable:!0,get:function(){return n(u)["default"]}});var a=e("./head");Object.defineProperty(t,"head",{enumerable:!0,get:function(){return n(a)["default"]}});var c=e("./last");Object.defineProperty(t,"last",{enumerable:!0,get:function(){return n(c)["default"]}})},{"./get-iterator":11,"./head":12,"./last":15,"./reduce":16,"./reverse":17}],14:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../curry"),i=e("./../../utils/checks"),u=e("./get-iterator"),a=n(u),c=e("./../transducers/Transformer"),l=e("./../transducers/Reduced"),f=(0,o.currify)(function(e,r,t){var n=arguments.length<=3||void 0===arguments[3]?0:arguments[3],o=arguments.length<=4||void 0===arguments[4]?(0,a["default"])(t):arguments[4];if(!(0,i.isIterable)(t))throw new Error("Cannot get iterator of non-iterable "+t+"!");if(!(0,i.isFunction)(e))throw new Error("iterableReduce expected a reducing function, got "+e+"!");if((0,c.isTransformer)(e))return s(e,r,t,n,o);var u=o.next();return u.done?r:(r=e(r,u.value,n,t),f(e,r,t,n+1,o))},3,!1,o.placeholder);t["default"]=f;var s=function d(e,r,t,n,o){var i=o.next();return i.done?(0,c.complete)(e,r):(r=(0,c.step)(e,r,i.value,n,t),(0,l.isReduced)(r)?(0,l.deref)(r):d(e,r,t,n+1,o))}},{"./../../utils/checks":39,"./../curry":9,"./../transducers/Reduced":20,"./../transducers/Transformer":21,"./get-iterator":11}],15:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../../utils/checks");t["default"]=function(e){if(!(0,n.isIterable)(e))throw new Error("Cannot get last element of non-iterable "+e+"!");if((0,n.isArray)(e))return(0,n.isUndefined)(e[e.length-1])?null:e[e.length-1];var r=!0,t=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done);r=!0)var a=i.value}catch(c){t=!0,o=c}finally{try{!r&&u["return"]&&u["return"]()}finally{if(t)throw o}}return a}},{"./../../utils/checks":39}],16:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.reduceRight1=t.reduceRight=t.reduce1=void 0;var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./iterable-reduce"),a=n(u),c=e("./get-iterator"),l=n(c),f=e("./reverse"),s=n(f);t["default"]=(0,i.currify)(function(e,r,t){if(!(0,o.isFunction)(e))throw new TypeError("reduce cannot be applied without first specifying a function!");if(!(0,o.isIterable)(t))throw new TypeError("reduce cannot be applied on a non-iterable!");return(0,a["default"])(e,r,t)},3,!1,i.placeholder);t.reduce1=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("reduce1 cannot be applied without first specifying a function!");if(!(0,o.isIterable)(r))throw new TypeError("reduce1 cannot be applied on a non-iterable!");var t=(0,l["default"])(r);return(0,a["default"])(e,t.next().value,r,1,t)},2,!1,i.placeholder),t.reduceRight=(0,i.currify)(function(e,r,t){if(!(0,o.isFunction)(e))throw new TypeError("reduceRight cannot be applied without first specifying a function!");if(!(0,o.isIterable)(t))throw new TypeError("reduceRight cannot be applied on a non-iterable!");return t=(0,s["default"])(t),(0,a["default"])(e,r,t)},3,!1,i.placeholder),t.reduceRight1=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("reduceRight1 cannot be applied without first specifying a function!");if(!(0,o.isIterable)(r))throw new TypeError("reduceRight1 cannot be applied on a non-iterable!");r=(0,s["default"])(r);var t=(0,l["default"])(r);return(0,a["default"])(e,t.next().value,r,1,t)},2,!1,i.placeholder)},{"./../../utils/checks":39,"./../curry":9,"./get-iterator":11,"./iterable-reduce":14,"./reverse":17}],17:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./../../utils/checks");t["default"]=function(e){if(!(0,n.isIterable)(e))throw new Error("Cannot get iterator of non-iterable "+e+"!");if((0,n.isArray)(e))return e.slice().reverse();var r=[],t=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(t=(u=a.next()).done);t=!0){var c=u.value;r.unshift(c)}}catch(l){o=!0,i=l}finally{try{!t&&a["return"]&&a["return"]()}finally{if(o)throw i}}return r}},{"./../../utils/checks":39}],18:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasProp=t.withProp=t.getProp=void 0;var n=e("./../utils/checks"),o=e("./curry"),i=(t.getProp=(0,o.currify)(function(e,r){if((0,n.isMap)(r))return r.has(e)?r.get(e):null;if(!(0,n.isString)(e)&&!(0,n.isNumber)(e))throw new Error("First argument '"+e+"' of getProp must be string or number!");return i(e,r)?r[e]:null},2,!1,o.placeholder),t.withProp=(0,o.currify)(function(e){var r=arguments.length<=1||void 0===arguments[1]?null:arguments[1],t=arguments[2];if(!(0,n.isString)(e)&&!(0,n.isNumber)(e))throw new Error("First argument '"+e+"' of getProp must be string or number!");var o={};return(0,n.isUndefined)(t)||(0,n.isNull)(t)||(t=(0,n.isString)(t)?{}:t,o[e]=r),Object.assign({},t,o)},3,!1,o.placeholder),t.hasProp=(0,o.currify)(function(e,r){return(0,n.isMap)(r)?r.has(e):r.hasOwnProperty(e)},2,!1,o.placeholder))},{"./../utils/checks":39,"./curry":9}],19:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trim=t.upper=t.lower=t.split=t.replace=t.repeat=t.length=void 0;var n=e("./../../utils/checks"),o=e("./../curry");t.length=function(e){if((0,n.isNumber)(e.length))return e.length;if((0,n.isObject)(e))return e.keys().length;throw new TypeError("Cannot get length of "+e+"!")},t.repeat=(0,o.currify)(function(e,r){return r.repeat(e)},2,!1,o.placeholder),t.replace=(0,o.currify)(function(e,r,t){return t.replace(e,r)},3,!1,o.placeholder),t.split=(0,o.currify)(function(e,r){return r.split(e)},2,!1,o.placeholder),t.lower=function(e){return e.toLowerCase()},t.upper=function(e){return e.toUpperCase()},t.trim=function(e){return e.trim()}},{"./../../utils/checks":39,"./../curry":9}],20:[function(e,r,t){"use strict";function n(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.ensureUnreduced=t.ensureReduced=t.isReduced=t.deref=void 0;var o=e("./../../utils/checks"),i=Symbol["for"]("reduced-value"),u=Symbol["for"]("reduced-flag"),a=function s(e){n(this,s),this[i]=e,this[u]=!0},c=function(e){return new a(e)};t["default"]=c;var l=t.deref=function(e){return e[i]},f=t.isReduced=function(e){return(0,o.isInstance)(a,e)||e[u]};t.ensureReduced=function(e){return f(e)?e:c(e)},t.ensureUnreduced=function(e){return f(e)?l(e):e}},{"./../../utils/checks":39}],21:[function(e,r,t){"use strict";function n(e,r,t,n){return e[c]=n,e[a]=r,e[u]=t,e}Object.defineProperty(t,"__esModule",{value:!0}),t.isTransformer=t.init=t.complete=t.step=void 0;var o=e("./../../utils/checks"),i=e("./../algebraic"),u=Symbol["for"]("transformer-init"),a=Symbol["for"]("transformer-completion"),c=Symbol["for"]("transformer-step");t["default"]=function(e){var r=arguments.length<=1||void 0===arguments[1]?i.identity:arguments[1],t=arguments.length<=2||void 0===arguments[2]?e:arguments[2],o=arguments.length<=3||void 0===arguments[3]?e:arguments[3];return n(e,r,t,o)};var l=(t.step=function(e,r,t){for(var n=arguments.length,o=Array(n>3?n-3:0),i=3;n>i;i++)o[i-3]=arguments[i];if(!l(e))throw new TypeError(e+" does not implement the Transformer interface");return e[c].apply(e,[r,t].concat(o))},t.complete=function(e,r){if(!l(e))throw new TypeError(e+" does not implement the Transformer interface");return e[a](r)},t.init=function(e){if(!l(e))throw new TypeError(e+" does not implement the Transformer interface");return e[u]()},t.isTransformer=function(e){return(0,o.isFunction)(e[c])&&(0,o.isFunction)(e[a])&&(0,o.isFunction)(e[u])})},{"./../../utils/checks":39,"./../algebraic":3}],22:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.concatMutable=void 0;var o=e("./Transformer"),i=n(o),u=e("./../algebraic/Monoid"),a=e("./../algebraic");t["default"]=(0,i["default"])(u._concat,a.identity,u._concat,function(e,r){return(0,u._concat)(r,e)});t.concatMutable=(0,i["default"])(u._concatMutable,a.identity,u._concatMutable,function(e,r){return(0,u._concatMutable)(r,e)})},{"./../algebraic":3,"./../algebraic/Monoid":1,"./Transformer":21}],23:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.dropWhile=void 0;var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../iterables"),a=e("./../algebraic"),c=e("./concat"),l=e("./Transformer"),f=n(l);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isNumber)(e))throw new TypeError("Cannot drop elements with a non-number limit "+e+"!");if(!(0,l.isTransformer)(r))return s(e,r);var t=0;return(0,f["default"])(function(n,o){for(var i=arguments.length,u=Array(i>2?i-2:0),a=2;i>a;a++)u[a-2]=arguments[a];return++t<=e?n:l.step.apply(void 0,[r,n,o].concat(u))},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)})},2,!1,i.placeholder);var s=function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot drop elements from non-iterable "+r+"!");for(var t=(0,u.getIterator)(r),n=(0,a.empty)(r),i=0,l=t.next();++i<=e;)l=t.next();for(;!l.done;)n=(0,c.concatMutable)(l.value,n),l=t.next();return n},d=(t.dropWhile=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("Cannot dropWhile elements with non-function predicate "+e+"!");if(!(0,l.isTransformer)(r))return d(e,r);var t=!1;return(0,f["default"])(function(n,o){for(var i=arguments.length,u=Array(i>2?i-2:0),a=2;i>a;a++)u[a-2]=arguments[a];return!t&&e.apply(void 0,[o].concat(u))?n:(t=!0,l.step.apply(void 0,[r,n,o].concat(u)))},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)})},2,!1,i.placeholder),function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot dropWhile elements from non-iterable "+r+"!");for(var t=(0,u.getIterator)(r),n=(0,a.empty)(r),i=t.next(),l=0;e(i.value,l++,r)&&!i.done;)i=t.next();for(;!i.done;)n=(0,c.concatMutable)(i.value,n),i=t.next();return n})},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Transformer":21,"./concat":22}],24:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.keep=t.dedupe=t.distinct=t.remove=void 0;var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../algebraic"),a=e("./../iterables"),c=e("./concat"),l=e("./Transformer"),f=n(l);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new Error("filter cannot be applied without first specifying a predicate function!");return(0,l.isTransformer)(r)?(0,f["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return e.apply(void 0,[n].concat(i))?l.step.apply(void 0,[r,t,n].concat(i)):t},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)}):s(e,r)},2,!1,i.placeholder);var s=function(e,r){return(0,a.reduce)(function(r,t,n,o){return e(t,n,o)?(0,c.concatMutable)(t,r):r},(0,u.empty)(r),r)},d=(t.remove=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new Error("remove cannot be applied without first specifying a predicate function!");return(0,l.isTransformer)(r)?(0,f["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return e.apply(void 0,[n].concat(i))?t:l.step.apply(void 0,[r,t,n].concat(i))},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)}):d(e,r)},2,!1,i.placeholder),function(e,r){return(0,a.reduce)(function(r,t,n,o){return e(t,n,o)?r:(0,c.concatMutable)(t,r)},(0,u.empty)(r),r)}),p=(t.distinct=function(e){if(!(0,l.isTransformer)(e))return p(e);var r=new Set;return(0,f["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return r.has(n)?t:(r.add(n),l.step.apply(void 0,[e,t,n].concat(i)))},function(r){return(0,l.complete)(e,r)},function(){return(0,l.init)(e)})},function(e){if(!(0,o.isIterable)(e))throw new Error("Cannot get distinct elements of non-iterable "+e+"!");for(var r=new Set,t=(0,u.empty)(e),n=(0,a.getIterator)(e),i=n.next();!i.done;)r.has(i.value)||(t=(0,c.concatMutable)(i.value,t),r.add(i.value)),i=n.next();return t}),y=(t.dedupe=function(e){if(!(0,l.isTransformer)(e))return y(e);var r={};return(0,f["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return n===r?t:(r=n,l.step.apply(void 0,[e,t,n].concat(i)))},function(r){return(0,l.complete)(e,r)},function(){return(0,l.init)(e)})},function(e){if(!(0,o.isIterable)(e))throw new Error("Cannot deduplicate elements of non-iterable "+e+"!");for(var r=(0,u.empty)(e),t={},n=(0,a.getIterator)(e),i=n.next();!i.done;)i.value!==t&&(r=(0,c.concatMutable)(i.value,r),t=i.value),i=n.next();return r}),b=(t.keep=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new Error("keep cannot be applied without first specifying a predicate function!");if(!(0,l.isTransformer)(r))return b(e,r);var t=0;return(0,f["default"])(function(n,i){for(var u=arguments.length,a=Array(u>2?u-2:0),c=2;u>c;c++)a[c-2]=arguments[c];var f=e.apply(void 0,[i].concat(a,[t++]));return(0,o.isNull)(f)||(0,o.isUndefined)(f)?n:l.step.apply(void 0,[r,n,i].concat(a))},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)})},2,!1,i.placeholder),function(e,r){var t=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return(0,a.reduce)(function(r,n,i,u){var a=e(n,i,u,t++);return(0,o.isNull)(a)||(0,o.isUndefined)(a)?r:(0,c.concatMutable)(n,r)},(0,u.empty)(r),r)})},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Transformer":21,"./concat":22}],25:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./Transformer");Object.defineProperty(t,"Transformer",{enumerable:!0,get:function(){return n(o)["default"]}}),Object.defineProperty(t,"step",{enumerable:!0,get:function(){return o.step}}),Object.defineProperty(t,"complete",{enumerable:!0,get:function(){return o.complete}}),Object.defineProperty(t,"init",{enumerable:!0,get:function(){return o.init}}),Object.defineProperty(t,"isTransformer",{enumerable:!0,get:function(){return o.isTransformer}});var i=e("./Reduced");Object.defineProperty(t,"Reduced",{enumerable:!0,get:function(){return n(i)["default"]}}),Object.defineProperty(t,"deref",{enumerable:!0,get:function(){return i.deref}}),Object.defineProperty(t,"isReduced",{enumerable:!0,get:function(){return i.isReduced}}),Object.defineProperty(t,"ensureReduced",{enumerable:!0,get:function(){return i.ensureReduced}}),Object.defineProperty(t,"ensureUnreduced",{enumerable:!0,get:function(){return i.ensureUnreduced}});var u=e("./into");Object.defineProperty(t,"into",{enumerable:!0,get:function(){return n(u)["default"]}});var a=e("./transduce");Object.defineProperty(t,"transduce",{enumerable:!0,get:function(){return n(a)["default"]}}),Object.defineProperty(t,"transduce1",{enumerable:!0,get:function(){return a.transduce1}});var c=e("./map");Object.defineProperty(t,"map",{enumerable:!0,get:function(){return n(c)["default"]}});var l=e("./filter");Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return n(l)["default"]}}),Object.defineProperty(t,"remove",{enumerable:!0,get:function(){return l.remove}}),Object.defineProperty(t,"distinct",{enumerable:!0,get:function(){return l.distinct}}),Object.defineProperty(t,"dedupe",{enumerable:!0,get:function(){return l.dedupe}}),Object.defineProperty(t,"keep",{enumerable:!0,get:function(){return l.keep}});var f=e("./replace");Object.defineProperty(t,"replace",{enumerable:!0,get:function(){return n(f)["default"]}});var s=e("./take");Object.defineProperty(t,"take",{enumerable:!0,get:function(){return n(s)["default"]}}),Object.defineProperty(t,"takeWhile",{enumerable:!0,get:function(){return s.takeWhile}}),Object.defineProperty(t,"takeNth",{enumerable:!0,get:function(){return s.takeNth}});var d=e("./drop");Object.defineProperty(t,"drop",{enumerable:!0,get:function(){return n(d)["default"]}}),Object.defineProperty(t,"dropWhile",{enumerable:!0,get:function(){return d.dropWhile}});var p=e("./concat");Object.defineProperty(t,"concat",{enumerable:!0,get:function(){return n(p)["default"]}}),Object.defineProperty(t,"concatMutable",{enumerable:!0,get:function(){return p.concatMutable}});var y=e("./partition");Object.defineProperty(t,"partitionAll",{enumerable:!0,get:function(){return y.partitionAll}}),Object.defineProperty(t,"partitionBy",{enumerable:!0,get:function(){return y.partitionBy}});var b=e("./random");Object.defineProperty(t,"random",{enumerable:!0,get:function(){return n(b)["default"]}});var v=e("./interpose");Object.defineProperty(t,"interpose",{enumerable:!0,get:function(){return n(v)["default"]}});var h=e("./tail");Object.defineProperty(t,"tail",{enumerable:!0,get:function(){return n(h)["default"]}});var m=e("./initial");Object.defineProperty(t,"initial",{enumerable:!0,get:function(){return n(m)["default"]}})},{"./Reduced":20,"./Transformer":21,"./concat":22,"./drop":23,"./filter":24,"./initial":26,"./interpose":27,"./into":28,"./map":29,"./partition":30,"./random":31,"./replace":32,"./tail":33,"./take":34,"./transduce":35}],26:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var i=e("./../../utils/checks"),u=e("./../iterables"),a=e("./../strings"),c=e("./../algebraic"),l=e("./../arrays"),f=e("./concat"),s=e("./Transformer"),d=n(s);t["default"]=function(e){if(!(0,s.isTransformer)(e))return p(e);var r=void 0;return(0,d["default"])(function(t,n){for(var u=arguments.length,c=Array(u>2?u-2:0),l=2;u>l;l++)c[l-2]=arguments[l];var f;if((0,i.isUndefined)(r))return r=[n].concat(c),t;var d=(f=r).splice.apply(f,[0,(0,a.length)(r),n].concat(c));return s.step.apply(void 0,[e,t].concat(o(d)))},function(r){return(0,s.complete)(e,r)},function(){return(0,s.init)(e)})};var p=function(e){if(!(0,i.isIterable)(e))throw new Error("Cannot get init elements of non-iterable "+e+"!");if((0,i.isArray)(e))return(0,a.length)(e)>1?(0,l.slice)(0,-1,e):(0,c.empty)(e);for(var r=(0,u.getIterator)(e),t=(0,c.empty)(e),n=r.next(),o=r.next();!o.done;)(0,f.concatMutable)(n.value,t),n=o,o=r.next();return t}},{"./../../utils/checks":39,"./../algebraic":3,"./../arrays":5,"./../iterables":13,"./../strings":19,"./Transformer":21,"./concat":22}],27:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../algebraic"),a=e("./../iterables"),c=e("./concat"),l=e("./Reduced"),f=e("./Transformer"),s=n(f);t["default"]=(0,i.currify)(function(e,r){if(!(0,f.isTransformer)(r))return d(e,r);var t=!1;return(0,s["default"])(function(n,o){for(var i=arguments.length,u=Array(i>2?i-2:0),a=2;i>a;a++)u[a-2]=arguments[a];if(!t)return t=!0,f.step.apply(void 0,[r,n,o].concat(u));var c=f.step.apply(void 0,[r,n,e].concat(u));return(0,l.isReduced)(c)?c:f.step.apply(void 0,[r,c,o].concat(u))},function(e){return(0,f.complete)(r,e)},function(){return(0,f.init)(r)})},2,!1,i.placeholder);var d=function(e,r){if(!(0,o.isIterable)(r))throw new Error("Cannot interpose elements for non-iterable "+r+"!");var t=(0,u.empty)(r),n=(0,a.getIterator)(r),i=n.next();if(!i.done)for(t=(0,c.concatMutable)(i.value,t),i=n.next();!i.done;i=n.next())t=(0,c.concatMutable)(i.value,(0,c.concatMutable)(e,t));return t}},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Reduced":20,"./Transformer":21,"./concat":22}],28:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../curry"),i=e("./concat"),u=e("./transduce"),a=n(u);t["default"]=(0,o.currify)(function(e,r,t){return(0,a["default"])(r,i.concatMutable,e,t)},3,!1,o.placeholder)},{"./../curry":9,"./concat":22,"./transduce":35}],29:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../algebraic"),a=e("./../iterables"),c=e("./concat"),l=e("./Transformer"),f=n(l);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("map cannot be applied without first specifying a function!");if(!(0,l.isTransformer)(r))return s(e,r);var t=0;return(0,f["default"])(function(n,o){for(var i=arguments.length,u=Array(i>2?i-2:0),a=2;i>a;a++)u[a-2]=arguments[a];return l.step.apply(void 0,[r,n,e.apply(void 0,[o].concat(u,[t++]))].concat(u))},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)})},2,!1,i.placeholder);var s=function(e,r){var t=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return(0,a.reduce)(function(r,n,o,i){return(0,c.concatMutable)(e(n,o,i,t++),r)},(0,u.empty)(r),r)}},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Transformer":21,"./concat":22}],30:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.partitionBy=t.partitionAll=void 0;var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../iterables"),a=e("./../algebraic"),c=e("./../strings"),l=e("./concat"),f=e("./Reduced"),s=e("./Transformer"),d=n(s),p=(t.partitionAll=(0,
i.currify)(function(e,r){if(!(0,o.isNumber)(e))throw new TypeError("Cannot partitionAll with a non-number "+e+"!");if(!(0,s.isTransformer)(r))return p(e,r);var t=0,n=void 0;return(0,d["default"])(function(i,u){for(var c=arguments.length,f=Array(c>2?c-2:0),d=2;c>d;d++)f[d-2]=arguments[d];if(n=(0,o.isUndefined)(n)?(0,a.empty)(i):n,!(t++<e)){var p=n;return t=1,n=(0,l.concatMutable)(u,(0,a.empty)(i)),s.step.apply(void 0,[r,i,p].concat(f))}return n=(0,l.concatMutable)(u,n),i},function(e){return!(0,o.isUndefined)(n)&&(0,c.length)(n)>0&&(e=(0,f.ensureUnreduced)((0,s.step)(r,e,n))),(0,s.complete)(r,e)},function(){return(0,s.init)(r)})},2,!1,i.placeholder),function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot partitionAll of non-iterable "+r+"!");for(var t=0,n=(0,a.empty)(r),i=(0,u.getIterator)(r),f=(0,a.empty)(r),s=i.next();!s.done;){if(t++<e)n=(0,l.concatMutable)(s.value,n);else{var d=n;t=1,n=(0,l.concatMutable)(s.value,(0,a.empty)(r)),r=(0,l.concatMutable)(d,f)}s=i.next()}return(0,c.length)(n)>0&&(f=(0,l.concatMutable)(n,f)),f}),y=(t.partitionBy=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("Cannot partitionBy with non-function "+e+"!");if(!(0,s.isTransformer)(r))return y(e,r);var t=void 0,n=void 0;return(0,d["default"])(function(i,u){for(var c=arguments.length,f=Array(c>2?c-2:0),d=2;c>d;d++)f[d-2]=arguments[d];var p=e.apply(void 0,[u].concat(f));if((0,o.isUndefined)(n))return n=(0,l.concatMutable)(u,(0,a.empty)(i)),t=p,i;if(t!==p){var y=n;return n=(0,l.concatMutable)(u,(0,a.empty)(i)),t=p,s.step.apply(void 0,[r,i,y].concat(f))}return n=(0,l.concatMutable)(u,n),i},function(e){return!(0,o.isUndefined)(n)&&(0,c.length)(n)>0&&(e=(0,f.ensureUnreduced)((0,s.step)(r,e,n))),(0,s.complete)(r,e)},function(){return(0,s.init)(r)})},2,!1,i.placeholder),function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot partitionAll of non-iterable "+r+"!");var t=void 0,n=void 0;return(0,u.reduce)(function(r,i,u,f){var s=e(i,u,f);if((0,o.isUndefined)(n))return n=(0,l.concatMutable)(i,(0,a.empty)(f)),t=s,r;if(t===s)n=(0,l.concatMutable)(i,n);else{var d=n;n=(0,l.concatMutable)(i,(0,a.empty)(f)),r=(0,l.concatMutable)(d,r),t=s}return u!==(0,c.length)(f)-1||(0,o.isUndefined)(n)||(r=(0,l.concatMutable)(n,r)),r},(0,a.empty)(r),r)})},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./../strings":19,"./Reduced":20,"./Transformer":21,"./concat":22}],31:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../algebraic"),a=e("./../iterables"),c=e("./concat"),l=e("./Transformer"),f=n(l);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isNumber)(e)||0>e||e>1)throw new TypeError("random cannot be applied with invalid probability "+e+"!");return(0,l.isTransformer)(r)?(0,f["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return Math.random()<e?l.step.apply(void 0,[r,t,n].concat(i)):t},function(e){return(0,l.complete)(r,e)},function(){return(0,l.init)(r)}):s(e,r)},2,!1,i.placeholder);var s=function(e,r){if(!(0,o.isIterable)(r))throw new Error("Cannot get random elements from non-iterable "+r+"!");for(var t=(0,u.empty)(r),n=(0,a.getIterator)(r),i=n.next();!i.done;i=n.next())t=Math.random()<e?(0,c.concatMutable)(i.value,t):t;return t}},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Transformer":21,"./concat":22}],32:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../prop"),a=e("./../algebraic"),c=e("./../iterables"),l=e("./concat"),f=e("./Transformer"),s=n(f);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isMap)(e)&&!(0,o.isObject)(e))throw new TypeError("replace cannot be applied without providing a replacement map or object!");return(0,f.isTransformer)(r)?(0,s["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),a=2;o>a;a++)i[a-2]=arguments[a];return f.step.apply(void 0,[r,t,(0,u.hasProp)(n,e)?(0,u.getProp)(n,e):n].concat(i))},function(e){return(0,f.complete)(r,e)},function(){return(0,f.init)(r)}):d(e,r)},2,!1,i.placeholder);var d=function(e,r){return(0,c.reduce)(function(r,t){return(0,l.concatMutable)((0,u.hasProp)(t,e)?(0,u.getProp)(t,e):t,r)},(0,a.empty)(r),r)}},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./../prop":18,"./Transformer":21,"./concat":22}],33:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./../../utils/checks"),i=e("./../iterables"),u=e("./../iterables/iterable-reduce"),a=n(u),c=e("./../strings"),l=e("./../algebraic"),f=e("./../arrays"),s=e("./concat"),d=e("./Transformer"),p=n(d);t["default"]=function(e){if(!(0,d.isTransformer)(e))return y(e);var r=!0;return(0,p["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return r?(r=!1,t):d.step.apply(void 0,[e,t,n].concat(i))},function(r){return(0,d.complete)(e,r)},function(){return(0,d.init)(e)})};var y=function(e){if(!(0,o.isIterable)(e))throw new Error("Cannot get tail elements of non-iterable "+e+"!");if((0,o.isArray)(e))return(0,c.length)(e)>1?(0,f.slice)(1,(0,c.length)(e),e):(0,l.empty)(e);var r=(0,i.getIterator)(e);return r.next(),(0,a["default"])(function(e,r){return(0,s.concatMutable)(r,e)},(0,l.empty)(l.empty),e,r)}},{"./../../utils/checks":39,"./../algebraic":3,"./../arrays":5,"./../iterables":13,"./../iterables/iterable-reduce":14,"./../strings":19,"./Transformer":21,"./concat":22}],34:[function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.takeNth=t.takeWhile=void 0;var o=e("./../../utils/checks"),i=e("./../curry"),u=e("./../iterables"),a=e("./../algebraic"),c=e("./concat"),l=e("./Reduced"),f=e("./Transformer"),s=n(f);t["default"]=(0,i.currify)(function(e,r){if(!(0,o.isNumber)(e))throw new TypeError("Cannot take elements with a non-number limit "+e+"!");if(!(0,f.isTransformer)(r))return d(e,r);var t=0;return(0,s["default"])(function(n,o){for(var i=arguments.length,u=Array(i>2?i-2:0),a=2;i>a;a++)u[a-2]=arguments[a];return++t<e?f.step.apply(void 0,[r,n,o].concat(u)):t===e?(0,l.ensureReduced)(f.step.apply(void 0,[r,n,o].concat(u))):(0,l.ensureReduced)(n)},function(e){return(0,f.complete)(r,e)},function(){return(0,f.init)(r)})},2,!1,i.placeholder);var d=function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot take elements from non-iterable "+r+"!");for(var t=(0,u.getIterator)(r),n=(0,a.empty)(r),i=0,l=t.next();i++<e&&!l.done;)n=(0,c.concatMutable)(l.value,n),l=t.next();return n},p=(t.takeWhile=(0,i.currify)(function(e,r){if(!(0,o.isFunction)(e))throw new TypeError("Cannot takeWhile elements with non-function predicate "+e+"!");return(0,f.isTransformer)(r)?(0,s["default"])(function(t,n){for(var o=arguments.length,i=Array(o>2?o-2:0),u=2;o>u;u++)i[u-2]=arguments[u];return e.apply(void 0,[n].concat(i))?f.step.apply(void 0,[r,t,n].concat(i)):(0,l.ensureReduced)(t)},function(e){return(0,f.complete)(r,e)},function(){return(0,f.init)(r)}):p(e,r)},2,!1,i.placeholder),function(e,r){if(!(0,o.isIterable)(r))throw new TypeError("Cannot takeWhile elements from non-iterable "+r+"!");for(var t=(0,u.getIterator)(r),n=(0,a.empty)(r),i=t.next(),l=0;e(i.value,l++,r)&&!i.done;)n=(0,c.concatMutable)(i.value,n),i=t.next();return n}),y=(t.takeNth=(0,i.currify)(function(e,r,t){return(0,o.isIterable)(r)||(0,f.isTransformer)(r)?y(e,0,r):arguments.length>2?y(e,r,t):function(t){return y(e,r,t)}},2,!1,i.placeholder),function(e,r,t){if(!(0,o.isNumber)(e)||0>=e)throw new TypeError("Cannot takeNth elements with an invalid n: '"+e+"'!");if(!(0,o.isNumber)(r))throw new TypeError("Second argument to takeNth must be a starting index number, transformer or iterable!");if(0>r&&(r%=e),!(0,f.isTransformer)(t))return b(e,r,t);var n=-1,i=0,u=0>r;return(0,s["default"])(function(o,a){for(var c=arguments.length,l=Array(c>2?c-2:0),s=2;c>s;s++)l[s-2]=arguments[s];return u?++n-e===r?(n=r,f.step.apply(void 0,[t,o,a].concat(l))):o:i++===r?(u=!0,n=r,f.step.apply(void 0,[t,o,a].concat(l))):o},function(e){return(0,f.complete)(t,e)},function(){return(0,f.init)(t)})}),b=function(e,r,t){if(!(0,o.isIterable)(t))throw new TypeError("Cannot takeNth elements from non-iterable "+t+"!");for(var n=(0,u.getIterator)(t),i=(0,a.empty)(t),l=-1,f=0,s=0>r,d=n.next();!d.done;)s?++l-e===r&&(l=r,i=(0,c.concatMutable)(d.value,i)):f++===r&&(s=!0,l=r,i=(0,c.concatMutable)(d.value,i)),d=n.next();return i}},{"./../../utils/checks":39,"./../algebraic":3,"./../curry":9,"./../iterables":13,"./Reduced":20,"./Transformer":21,"./concat":22}],35:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._applyTransform=t.transduce1=void 0;var n=e("./../curry"),o=e("./Transformer"),i=e("./../iterables"),u=(0,n.currify)(function(e,r,t,n){if(!(0,o.isTransformer)(r))throw new TypeError("transduce cannot be applied with non-Transformer "+r+"!");return(0,i.reduce)(a(e,r),t,n)},4,!1,n.placeholder);t["default"]=u;var a=(t.transduce1=(0,n.currify)(function(e,r,t){return u(e,r,(0,o.init)(r),t)},3,!1,n.placeholder),t._applyTransform=function(e,r){var t=e(r);if(!(0,o.isTransformer)(t))throw new TypeError("Invalid transducer! "+(e+" applied with transformer did not return a transformer!"));return t})},{"./../curry":9,"./../iterables":13,"./Transformer":21}],36:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trace=void 0;var n=e("./curry");t.trace=(0,n.currify)(function(e,r){return console.log(e+":\nData: "+r),r})},{"./curry":9}],37:[function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r["default"]=e,r}Object.defineProperty(t,"__esModule",{value:!0});var o=e("./utils"),i=n(o),u=e("./functional"),a=n(u),c={utils:i,functional:a};"undefined"!=typeof window&&(window.comraq=c),t["default"]=c,r.exports=t["default"]},{"./functional":10,"./utils":40}],38:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=e("./checks");t["default"]=function(e){return new Promise(function(r,t){var u=e.method||"GET",a=e.url||"/",c=e.user||"",l=e.password||"",f=null;e.body&&(f=(0,n.isString)(e.body)?e.body:JSON.stringify(e.body));var s=new XMLHttpRequest;s.onreadystatechange=function(){return i(s,r,t)},s.open(u,a,!0,c,l);var d={"Content-Type":"application/json"},p=o(d,e.headers);for(var y in p)s.setRequestHeader(y,p[y]);s.send(f)})};var o=function(e){var r=arguments.length<=1||void 0===arguments[1]?null:arguments[1],t={},n=!1;if(r)for(var o in r)"content-type"===o.toLowerCase()&&(n=!0),t[o]=r[o];if(!n)for(var i in e)t[i]=e[i];return t},i=function(e,r,t){if(4==e.readyState){var n=u(e);return 200==e.status?r(JSON.stringify(n)):t(JSON.stringify(n))}},u=function(e){var r,t=e.getAllResponseHeaders(),n=e.getResponseHeader("Content-Type");if("application/json"===n.toLowerCase())try{r=JSON.parse(e.responseText)}catch(o){console.log("Got bad JSON! Error "+o),r=e.responseText}else r=e.responseText;return{headers:t.trim().split("\n"),body:r}}},{"./checks":39}],39:[function(e,r,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isInstance=t.isIterable=t.isMap=t.isObject=t.isBoolean=t.isUndefined=t.isNull=t.isJson=t.isDate=t.isNumber=t.isString=t.isArray=t.isFunction=void 0;var n=e("./../functional/curry"),o=function(e,r){return Object.prototype.toString.call(e)==="[object "+r+"]"},i=t.isFunction=function(e){return o(e,"Function")};t.isArray=function(e){return o(e,"Array")},t.isString=function(e){return o(e,"String")},t.isNumber=function(e){return o(e,"Number")},t.isDate=function(e){return o(e,"Date")},t.isJson=function(e){return o(e,"JSON")},t.isNull=function(e){return o(e,"Null")},t.isUndefined=function(e){return o(e,"Undefined")},t.isBoolean=function(e){return o(e,"Boolean")},t.isObject=function(e){return o(e,"Object")},t.isMap=function(e){return o(e,"Map")},t.isIterable=function(e){return i(e[Symbol.iterator])},t.isInstance=(0,n.currify)(function(e,r){return e[Symbol.hasInstance](r)},2,!1,n.placeholder)},{"./../functional/curry":9}],40:[function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r["default"]=e,r}function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ajax=t.checks=void 0;var i=e("./ajax");Object.defineProperty(t,"ajax",{enumerable:!0,get:function(){return o(i)["default"]}});var u=e("./checks"),a=n(u);t.checks=a},{"./ajax":38,"./checks":39}]},{},[37]);
//# sourceMappingURL=data:application/json;base64,
